DIFFICULTY:-Hard
COMPANY:-Amazon

Question:-
Your task is to analyze the effectiveness of Amazon's notifications in driving user engagement and conversions, considering the user purchase data. 
A purchase is considered to be associated with a notification if the purchase happens within the timeframe of earliest of below 2 events:
1-  2 hours from notification delivered time
2-  Next notification delivered time.

Each notification is sent for a particular product id but a customer may purchase same or another product. 
Considering these rules write an SQL to find number of purchases associated with each notification for same product or a different product in 2 separate columns, 
display the output in ascending order of notification id.

Table:notifications
+-----------------+------------+
| COLUMN_NAME     | DATA_TYPE  |
+-----------------+------------+
| notification_id | int        |
| delivered_at    | datetime   |
| product_id      | varchar(2) |
+-----------------+------------+

Table:purchases 
+--------------------+------------+
| COLUMN_NAME        | DATA_TYPE  |
+--------------------+------------+
| product_id         | varchar(2) |
| purchase_timestamp | datetime   |
| user_id            | int        |
+--------------------+------------+

My Solution:-
WITH notificationData AS(
SELECT notification_id, product_id, delivered_at,
DATE_ADD(delivered_at, INTERVAL 2 HOUR) AS 2hoursDeliveryTime,
LEAD(delivered_at,1) OVER(ORDER BY notification_id) AS nextDeliveryTime
FROM notifications
),
cutoofNotification AS(
SELECT notification_id,product_id,delivered_at,
CASE WHEN 2hoursDeliveryTime<nextDeliveryTime THEN 2hoursDeliveryTime
WHEN nextDeliveryTime<2hoursDeliveryTime THEN nextDeliveryTime
WHEN nextDeliveryTime IS NULL THEN 2hoursDeliveryTime END AS notificationCutoofTime
FROM notificationData
),
combineData AS(
SELECT purchases.user_id, purchases.product_id AS purchasedProduct, cutoofNotification.product_id, cutoofNotification.notification_id
FROM purchases INNER JOIN cutoofNotification ON purchases.purchase_timestamp BETWEEN delivered_at AND notificationCutoofTime
)

SELECT notification_id,
SUM(CASE WHEN purchasedProduct=product_id THEN 1 ELSE 0 END) AS samePurchasedProduct,
SUM(CASE WHEN purchasedProduct!=product_id THEN 1 ELSE 0 END) AS differentPurchasedProduct
FROM combineData
GROUP BY notification_id ORDER BY notification_id

Actual Solution:-
with cte as (
select * 
,case when DATE_ADD(delivered_at , INTERVAL 2 HOUR) <= lead(delivered_at,1,'9999-12-31') over(order by notification_id)
then DATE_ADD(delivered_at , INTERVAL 2 HOUR) else lead(delivered_at,1,'9999-12-31') over(order by notification_id)
end as notification_valid_till
from notifications
)
,cte2 as (
select notification_id,p.user_id,p.product_id as purchased_product
,cte.product_id as notified_product
 from purchases p 
 inner join cte on p.purchase_timestamp between delivered_at and notification_valid_till
)
select notification_id 
,sum(case when purchased_product=notified_product then 1 else 0 end) as same_product_purchases
,sum(case when purchased_product!=notified_product then 1 else 0 end) as different_product_purchases
from cte2
group by notification_id
ORDER BY notification_id;
