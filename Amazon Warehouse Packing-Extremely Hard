DIFFICULTY:-Extremely Hard
COMPANY:-Amazon

Question:-
During a warehouse packaging process, items of various weights (1 kg to 5 kg) need to be packed sequentially into boxes. Each box can hold a maximum of 5 kg in total. 
The items are presented in a table according to their arrival order, and the goal is to pack them into boxes, keeping the order (based on id) while ensuring each box’s 
total weight does not exceed 5 kg.

**Requirements**:
1. Pack items into boxes in their given order based on id.
2. Each box should not exceed 5 kg in total weight.
3. Once a box reaches the 5 kg limit or would exceed it by adding the next item, start packing into a new box.
4. Assign a box number to each item based on its position in the sequence, so that items within each box do not exceed the 5 kg limit.

**Example**:
Given the items with weights `[1, 3, 5, 3, 2]`, we need to pack them into boxes as follows:

- **Box 1**: Items with weights `[1, 3]` — Total weight = 4 kg
- **Box 2**: Item with weight `[5]` — Total weight = 5 kg
- **Box 3**: Items with weights `[3, 2]` — Total weight = 5 kg

The result should display each item , weight and its assigned box number starting from 1.

 

Table: items 
+-------------+-----------+
| COLUMN_NAME | DATA_TYPE |
+-------------+-----------+
| id          | int       |
| weight      | int       |
+-------------+-----------+

My Solution:-
SET @current_weight = 0;
SET @box_number = 1;

WITH CumulativeWeight AS (
    SELECT
        id,
        weight,
        ROW_NUMBER() OVER (ORDER BY id) AS row_num
    FROM items
),
BoxAssignment AS (
    SELECT
        id,
        weight,
        row_num,
        -- This logic assigns the box number and resets the cumulative weight after 5 kg
        IF(@current_weight + weight > 5, @box_number := @box_number + 1, @box_number) AS box_number,
        @current_weight := IF(@current_weight + weight > 5, weight, @current_weight + weight) AS cumulative_weight
    FROM CumulativeWeight
)
SELECT
    id,
    weight,
    box_number
FROM BoxAssignment
ORDER BY id;

Actual Solution:-
with RECURSIVE cte as (
select  id,weight,weight as running_sum, 1 as box_number 
from items
where id=1
union all
select  b.id, b.weight,case when cte.running_sum+b.weight<=5 then cte.running_sum+b.weight else b.weight end as running_sum
,case when cte.running_sum+b.weight<=5 then cte.box_number else cte.box_number +1  end as box_number
from items b
inner join cte on b.id=cte.id+1
)
select id, weight, box_number from cte;
