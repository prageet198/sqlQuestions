DIFFICULTY:-Extremely Hard
COMPANY:-Amazon

Question:-
You are given two tables: products and orders. The products table contains information about each product, including the product ID and available quantity in the warehouse. 
The orders table contains details about customer orders, including the order ID, product ID, order date, and quantity requested by the customer.

Write an SQL query to generate a report listing the orders that can be fulfilled based on the available inventory in the warehouse, following a 
first-come-first-serve approach based on the order date. Each row in the report should include the order ID, product name, quantity requested by the customer, 
quantity actually fulfilled, and a comments column as below:

If the order can be completely fulfilled then 'Full Order'.
If the order can be partially fulfilled then 'Partial Order'.
If order can not be fulfilled at all then 'No Order' .
Display the output in ascending order of order id.

Table: products
+--------------------+-------------+
| COLUMN_NAME        | DATA_TYPE   |
+--------------------+-------------+
| product_id         | int         |
| product_name       | varchar(10) |
| available_quantity | int         |
+--------------------+-------------+

Table: orders
+--------------------+-----------+
| COLUMN_NAME        | DATA_TYPE |
+--------------------+-----------+
| order_id           | int       |
| product_id         | int       |
| order_date         | date      |
| quantity_requested | int       |
+--------------------+-----------+

My Solution:-
WITH initialData AS(
SELECT order_id, product_name,
quantity_requested,
available_quantity,
SUM(quantity_requested) OVER (PARTITION BY product_name ORDER BY order_date) AS cumulative_requested
FROM orders INNER JOIN products ON orders.product_id=products.product_id
),
finalData AS(
SELECT order_id, product_name,quantity_requested,
CASE
        WHEN cumulative_requested <= available_quantity THEN quantity_requested  -- Fulfill the full request
        WHEN cumulative_requested > available_quantity THEN 
            GREATEST(available_quantity - (cumulative_requested - quantity_requested), 0)  -- Ensure no negative fulfillment
    END AS quantity_fulfilled
FROM initialData
)
SELECT *,
CASE WHEN quantity_requested=quantity_fulfilled THEN 'Full Order'
     WHEN quantity_fulfilled=0 THEN 'No Order'
     ELSE 'Partial Order' END AS flag
FROM finalData

Actual Solution:-
with cte as (
select o.*
,sum(quantity_requested) over(partition by o.product_id order by order_date) as running_requested_qty
,p.available_quantity
,p.product_name
from orders o
inner join products p on o.product_id=p.product_id
)
select order_id,product_name,quantity_requested
,case when  running_requested_qty <= available_quantity then quantity_requested
when available_quantity-(running_requested_qty-quantity_requested) > 0 then available_quantity-(running_requested_qty-quantity_requested)
else 0 end as qty_fulfilled  
,case when  running_requested_qty <= available_quantity then 'Full Order'
when available_quantity-(running_requested_qty-quantity_requested) > 0 then 'Partial Order'
else 'No Order' end as comments  
from cte
ORDER BY order_id;
